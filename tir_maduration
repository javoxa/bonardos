####ingresar los datos
#####
fecha_cotizacion = '06/09/24' #cierre
#DATOS en USD
#bopreal
BPY6D = 83.75
BPJ5D = 83.9
BPA7D = 95.7
BPB7D = 84.5
BPC7D = 77.75
BPD7D = 78
#bonares
AL29  = 61.89
AL30  = 55.07
AL35  = 44.9
AE38  = 47.83
AL41  = 40.899
#globales
GD29  = 63.95
GD30  = 55.81
GD35  = 45.00
GD38  = 50.6
GD41  = 42.25
GD46  = 48.9
#####
#####

from datetime import datetime
from scipy.optimize import newton
import matplotlib.pyplot as plt
import numpy as np

def calcular_fecha_supera_bono(fechas_pagos, flujos, valor_bono):
    flujos_acumulados = 0
    for fecha_pago, flujo in zip(fechas_pagos, flujos):
        flujos_acumulados += flujo
        if flujos_acumulados >= valor_bono:
            return (fecha_pago, flujos_acumulados)
    return ("No supera dentro del período", 0)

# Definir fechas de pago y flujos según el ticker
def obtener_fechas_y_flujos(ticker):
    if ticker == 'AL29' or ticker =='GD29':
        fechas_pagos = [
            '09/01/25', '09/07/25', '09/01/26', '09/07/26',
            '09/01/27', '09/07/27', '09/01/28', '09/07/28',
            '09/01/29', '09/07/29']
        flujos = [10.50, 10.45, 10.40, 10.35, 10.30, 10.25, 10.20, 10.15, 10.10, 10.05]
        amortizacion = [10., 10., 10., 10., 10., 10., 10., 10., 10., 10.]
    elif ticker == 'BPA7D':
        fechas_pagos = [
            '31/10/24', '30/04/25', '30/10/25', '30/04/26',
            '30/10/26', '30/04/27', '31/10/27']
        flujos = [3.39, 2.51, 2.54, 2.53, 2.54, 52.53, 51.28]
        amortizacion = [0., 0., 0., 0., 0., 50., 50.]
    elif ticker[:2] == 'BP' and ticker[-2:] == '7D':
        fechas_pagos = [
            '31/10/24', '30/04/25', '30/10/25', '30/04/26',
            '30/10/26', '30/04/27', '31/10/27']
        amortizacion = [0., 0., 0., 0., 0., 50., 50.]
        if ticker[2]=='A':
            flujos = [3.39, 2.51, 2.54, 2.53, 2.54, 52.53, 51.28]
        else:
            flujos = [3.33, 2.49, 2.5, 2.5, 2.5, 52.5, 51.26]
    elif ticker == 'BPY26':
        fechas_pagos = [
            #'31/08/24',
            '30/11/24', '28/02/25', '28/05/25',
            '28/08/25', '28/11/25', '28/02/26', '31/05/26']
        flujos = [#1.52,
                  0.74, 0.73, 0.75, 0.75, 33.75, 22.61, 45.24]
        amortizacion = [0., 0., 0., 0., 0., 33., 22.11, 44.89]
    elif ticker == 'BPJ5D':
        fechas_pagos = [
            '30/09/24', '31/10/24', '30/11/24', '31/12/24',
            '31/01/25', '28/02/25', '31/03/25', '30/04/25',
            '31/05/25', '30/06/25']
        flujos = [8.33, 8.33, 8.33, 8.33, 8.33, 8.33,
                  8.33, 8.33, 8.33, 8.37]
        amortizacion = [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]
    elif ticker == 'AL30'or ticker =='GD30':
        fechas_pagos = [
            '09/01/25', '09/07/25', '09/01/26', '09/07/26',
            '09/01/27', '09/07/27', '09/01/28', '09/07/28',
            '09/01/29', '09/07/29', '09/01/30', '09/07/30']
        flujos = [8.33, 8.30, 8.27, 8.24, 8.21, 8.42, 8.35, 8.28, 8.21, 8.14, 8.07]
        amortizacion = [8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8., 8.]
    elif ticker == 'AE38' or ticker =='GD38':
        fechas_pagos = [
            '09/01/25', '09/07/25', '09/01/26', '09/07/26',
            '09/01/27', '09/07/27', '09/01/28', '09/07/28',
            '09/01/29', '09/07/29', '09/01/30', '09/07/30',
            '09/01/31', '09/07/31', '09/01/32', '09/07/32',
            '09/01/33', '09/07/33', '09/01/34', '09/07/34',
            '09/01/35', '09/07/35', '09/01/36', '09/07/36',
            '09/01/37', '09/07/37', '09/01/38', '09/07/38']
        flujos = [2.5, 2.5, 2.5, 2.5, 2.5, 7.05, 6.94, 6.82, 6.71, 6.6, 6.48, 6.37,
                  6.25, 6.14, 6.03, 5.91, 5.8, 5.69, 5.57, 5.46, 5.35, 5.23, 5.12,
                  5.0, 4.89, 4.78, 4.66]
        amortizacion = [0., 0., 0., 0., 0., 4.55, 4.55, 4.55, 4.55, 4.55, 4.55, 4.55,
                        4.55, 4.55, 4.55, 4.55, 4.55, 4.55, 4.55, 4.55, 4.55, 4.55,
                        4.55, 4.55, 4.55, 4.55]
    elif ticker == 'AL35' or ticker =='GD35':
        fechas_pagos = [
            '09/01/25', '09/07/25', '09/01/26', '09/07/26',
            '09/01/27', '09/07/27', '09/01/28', '09/07/28',
            '09/01/29', '09/07/29', '09/01/30', '09/07/30',
            '09/01/31', '09/07/31', '09/01/32', '09/07/32',
            '09/01/33', '09/07/33', '09/01/34', '09/07/34',
            '09/01/35', '09/07/35']
        flujos = [2.06, 2.06, 2.06, 2.06, 2.06, 2.06, 2.38, 2.38,
                  2.5, 2.5, 2.5, 2.5, 12.5, 12.25, 12., 11.75, 11.5,
                  11.25, 11., 10.75, 10.5, 10.25] 
        amortizacion = [0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                        0., 0., 10., 10., 10., 10., 10., 10., 10., 10., 10., 10.]
    elif ticker == 'AL41' or ticker =='GD41':
        fechas_pagos = [
            '09/01/25', '09/07/25', '09/01/26', '09/07/26',
            '09/01/27', '09/07/27', '09/01/28', '09/07/28',
            '09/01/29', '09/07/29', '09/01/30', '09/07/30',
            '09/01/31', '09/07/31', '09/01/32', '09/07/32',
            '09/01/33', '09/07/33', '09/01/34', '09/07/34',
            '09/01/35', '09/07/35', '09/01/36', '09/07/36',
            '09/01/37', '09/07/37', '09/01/38', '09/07/38',
            '09/01/39', '09/07/39', '09/01/40', '09/07/40',
            '09/01/41', '09/07/41']
        flujos = [1.7514, 1.7514, 1.7514, 1.7514, 1.7514, 1.7514, 5.3214,
                  5.2614, 5.1314, 5.6614, 5.5714, 5.4914, 5.4014, 5.3114,
                  5.2214, 5.1414, 5.0514, 4.9614, 4.8814, 4.7914, 4.714,
                  4.6114, 4.5314, 4.4414, 4.3514, 4.2714, 4.1814, 4.0914,
                  4.0114, 3.9214, 3.8314, 3.7414, 3.6614]
        amortizacion = [0., 0., 0., 0., 0., 0., 3.5714, 3.5714, 3.5714, 3.5714,
                        3.5714, 3.5714, 3.5714, 3.5714, 3.5714, 3.5714, 3.5714,
                        3.5714, 3.5714, 3.5714, 3.5714, 3.5714, 3.5714, 3.5714,
                        3.5714, 3.5714, 3.5714, 3.5714, 3.5714, 3.5714, 3.5714,
                        3.5714, 3.5714, 3.5714]
    elif ticker == 'GD46':
        fechas_pagos = [
            '09/01/25', '09/07/25', '09/01/26', '09/07/26',
            '09/01/27', '09/07/27', '09/01/28', '09/07/28',
            '09/01/29', '09/07/29', '09/01/30', '09/07/30',
            '09/01/31', '09/07/31', '09/01/32', '09/07/32',
            '09/01/33', '09/07/33', '09/01/34', '09/07/34',
            '09/01/35', '09/07/35', '09/01/36', '09/07/36',
            '09/01/37', '09/07/37', '09/01/38', '09/07/38',
            '09/01/39', '09/07/39', '09/01/40', '09/07/40',
            '09/01/41', '09/07/41', '09/01/42', '09/07/42',
            '09/01/43', '09/07/43', '09/01/44', '09/07/44',
            '09/01/45', '09/07/45', '09/01/46', '09/07/46']
        flujos = [4.3327, 4.2927, 4.2427, 4.1927, 4.1527, 4.1027, 4.1627, 4.1127,
                  4.3227, 4.2627, 4.2027, 4.1527, 4.0927, 4.0327, 3.9727, 3.9227,
                  3.8627, 3.8027, 3.7527, 3.6927, 3.6327, 3.5827, 3.5227, 3.4627,
                  3.4127, 3.3527, 3.2927, 3.2427, 3.1827, 3.1227, 3.0727, 3.0127,
                  2.9527, 2.8927, 2.8427, 2.7827, 2.7227, 2.6727, 2.6127, 2.5527,
                  2.5027, 2.4427, 2.3827, 2.3327]
        
        amortizacion = [2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727,
                        2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727,
                        2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727,
                        2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727,
                        2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727, 2.2727,
                        2.2727, 2.2727, 2.2727, 2.2727]
                        
    else:
        raise ValueError("Ticker no reconocido")

    return fechas_pagos,flujos

def calcular_periodos(fecha_cotizacion, fechas_pagos):
    fecha_cotizacion = datetime.strptime(fecha_cotizacion, '%d/%m/%y')
    periodos = []
    for fecha_pago in fechas_pagos:
        fecha_pago = datetime.strptime(fecha_pago, '%d/%m/%y')
        periodo = (fecha_pago - fecha_cotizacion).days / 365.25
        periodos.append(periodo)
    return periodos

#colores de los puntos
def color_bonos(ticker):
    if ticker[0] == 'A':
        color_punto = 'red'
        lado = 'left'
    elif ticker[0] == 'G':
        color_punto  = 'black'
        lado = 'right'
    elif ticker[0] == 'B':
        color_punto  = 'blue'
        if ticker == 'BPD7D':
            lado = 'right'
        else:
            lado = 'left'
    return color_punto, lado
# Función para calcular el valor presente de los flujos de caja
def valor_presente(flujos, tir):
    return sum(flujo / (1 + tir) ** periodo for flujo, periodo in flujos)

# Función para calcular la TIR
def calcular_tir(valor_bono, flujos):
    def funcion_a_minimizar(tir):
        return valor_presente(flujos, tir) - valor_bono
    # Estimación inicial de la TIR
    tir_decimal = newton(funcion_a_minimizar, 0.05)
    return tir_decimal  # Ya en decimal
    
def calcular_tir_y_maduracion(ticker, valor_bono, fecha_cotizacion):
    # Definir fechas de pago y flujos según el ticker
    fechas_pagos,flujos = obtener_fechas_y_flujos(ticker)

    # Calcular los períodos en años desde la fecha de cotización
    periodos = calcular_periodos(fecha_cotizacion, fechas_pagos)

    # Recalcular flujos con los períodos correctos
    flujos_recalculados = [(flujo, periodo) for flujo, periodo in zip(flujos, periodos)]

    # Calcular la TIR
    tir = calcular_tir(valor_bono, flujos_recalculados)

    # Determinar la maduración
    fecha_vencimiento = datetime.strptime(fechas_pagos[-1], '%d/%m/%y')
    fecha_cotizacion_dt = datetime.strptime(fecha_cotizacion, '%d/%m/%y')
    maduracion = (fecha_vencimiento - fecha_cotizacion_dt).days / 365.25

    # Calcular la fecha en la que el flujo de caja supera el valor del bono
    fecha_supera_bono, flujo_acumulado = calcular_fecha_supera_bono(fechas_pagos, flujos, valor_bono)

    return (tir * 100, maduracion, fecha_supera_bono, flujo_acumulado)

def graficar_curva_rendimiento_y_punto(ticker, rango_precio, precio_actual, residual, fecha_cotizacion, label):
    precios = np.arange(rango_precio[0], rango_precio[1], 1.)
    n = len(precios)
    tir = []
    paridades = []

    for i in range(n):
        tir_bono = calcular_tir_y_maduracion(ticker, precios[i], fecha_cotizacion)[0]
        tir.append(tir_bono)
        paridades.append((precios[i] / residual) * 100)  # Calcular paridad

    plt.plot(np.array(tir, float), paridades, label=label)
    
    # Calcular y graficar el punto específico de la TIR para la paridad actual
    tir_actual = calcular_tir_y_maduracion(ticker, precio_actual, fecha_cotizacion)[0]
    paridad_actual = (precio_actual / residual) * 100
    color_punto, lado = color_bonos(ticker)
    plt.scatter(tir_actual, paridad_actual, color=color_punto, zorder=5)  
    plt.text(tir_actual, paridad_actual, f'{ticker}', fontsize=9, ha=lado)

def graficar_punto(ticker, precio_actual, residual, fecha_cotizacion, label):
    
    # Calcular y graficar el punto específico de la TIR para la paridad actual
    tir_actual = calcular_tir_y_maduracion(ticker, precio_actual, fecha_cotizacion)[0]
    paridad_actual = (precio_actual / residual) * 100
    color_punto, lado = color_bonos(ticker)
    plt.scatter(tir_actual, paridad_actual, color=color_punto, zorder=5)
    plt.text(tir_actual, paridad_actual, f'{ticker}', fontsize=9, ha=lado)

def calcular_duracion_modificada(flujos, periodos, tir, n_periodos):

    # Cálculo de la duración de Macaulay
    duracion_macaulay = sum(periodo * (flujo / (1 + tir) ** periodo) for flujo, periodo in zip(flujos, periodos))
    valor_presente_total = sum(flujo / (1 + tir) ** periodo for flujo, periodo in zip(flujos, periodos))
    duracion_macaulay /= valor_presente_total
    
    # Duración modificada
    duracion_modificada = duracion_macaulay / (1 + tir / n_periodos)
    
    return duracion_modificada

def graficar_paridad_vs_duracion_modificada(tickers, precios, residuales, fecha_cotizacion, n_periodos=2):

    duraciones_modificadas = []
    paridades = []

    for ticker, precio, residual in zip(tickers, precios, residuales):
        tir, maduracion, _, _ = calcular_tir_y_maduracion(ticker, precio, fecha_cotizacion)
        fechas_pagos, flujos = obtener_fechas_y_flujos(ticker)
        periodos = calcular_periodos(fecha_cotizacion, fechas_pagos)
        duracion_modificada = calcular_duracion_modificada(flujos, periodos, tir/100, n_periodos)
        
        duraciones_modificadas.append(duracion_modificada)
        paridades.append((precio / residual) * 100)  # Calcular paridad

    # Graficar
    plt.figure(figsize=(10, 6))
    for i, ticker in enumerate(tickers):
        color_punto, lado = color_bonos(ticker)
        plt.scatter(duraciones_modificadas[i], paridades[i], color= color_punto )
        plt.text(duraciones_modificadas[i], paridades[i], f'{ticker}', fontsize=9, ha=lado)

    plt.title('Paridad vs Maduración Modificada')
    plt.xlabel('Maduración Modificada')
    plt.ylabel('Paridad (%)')
    plt.grid(True)
    plt.show()



def graficar_maduracion_vs_tir(tickers, precios, residuales, fecha_cotizacion, n_periodos=2):
    duraciones_modificadas = []
    tir_values = []

    for ticker, precio, residual in zip(tickers, precios, residuales):
        tir, maduracion, _, _ = calcular_tir_y_maduracion(ticker, precio, fecha_cotizacion)
        fechas_pagos, flujos = obtener_fechas_y_flujos(ticker)
        periodos = calcular_periodos(fecha_cotizacion, fechas_pagos)
        duracion_modificada = calcular_duracion_modificada(flujos, periodos, tir/100, n_periodos)
        
        duraciones_modificadas.append(duracion_modificada)
        tir_values.append(tir)

    plt.figure(figsize=(10, 6))
    for i, ticker in enumerate(tickers):
        color_punto, lado = color_bonos(ticker)
        plt.scatter(duraciones_modificadas[i], tir_values[i], color=color_punto)
        plt.text(duraciones_modificadas[i], tir_values[i], f'{ticker}', fontsize=9, ha=lado)

    plt.title('Maduración Modificada vs TIR')
    plt.xlabel('Maduración Modificada')
    plt.ylabel('TIR (%)')
    plt.grid(True)
    plt.show()
    


#bopreal
cotizacion_BPY26 = BPY6D
cotizacion_BPJ5D = BPJ5D
cotizacion_BPA7D = BPA7D
cotizacion_BPB7D = BPB7D
cotizacion_BPC7D = BPC7D
cotizacion_BPD7D = BPD7D

#bonares
cotizacion_AL29  = AL29
cotizacion_AL30  = AL30
cotizacion_AL35  = AL35
cotizacion_AE38  = AE38
cotizacion_AL41  = AL41
#globales
cotizacion_GD29  = GD29
cotizacion_GD30  = GD30
cotizacion_GD35  = GD35
cotizacion_GD38  = GD38
cotizacion_GD41  = GD41
cotizacion_GD46  = GD46

#medidas de rentabilidad
#bopreal
valor_par_BPY26 = 100.0083
intereses_acumulados_BPY26 = 0.0083
valor_par_BPJ5D = 83.34
intereses_acumulados_BPJ5D = 0.0
valor_par_BPA7D = 103.2778
intereses_acumulados_BPA7D = 0.2778
valor_par_BPB7D = 103.2778
intereses_acumulados_BPB7D = 0.2778
valor_par_BPC7D = 103.2778
intereses_acumulados_BPC7D = 0.2778
valor_par_BPD7D = 103.2778
intereses_acumulados_BPD7D = 0.2778


#bonares
valor_par_AL29  = 100.1417
intereses_acumulados_AL29 = 0.1417

valor_par_AL30  = 96.102
intereses_acumulados_AL30 = 0.102

valor_par_AL30  = 96.102
intereses_acumulados_AL30 = 0.102

valor_par_AL35  = 100.5844
intereses_acumulados_AL35 = 0.5844

valor_par_AE38  = 100.7083
intereses_acumulados_AE38 = 0.7083

valor_par_AL41  = 100.4958
intereses_acumulados_AL41 = 0.4958

#globales

valor_par_GD46  = 100.5844
intereses_acumulados_GD46 = 0.5844
#el resto de los globales son igual a los bonares

# Definición del residual de cada bono
#bopreal
residual_BPY26 = valor_par_BPY26 - intereses_acumulados_BPY26
residual_BPJ5D = valor_par_BPJ5D - intereses_acumulados_BPJ5D
residual_BPA7D = valor_par_BPA7D - intereses_acumulados_BPA7D
residual_BPB7D = valor_par_BPB7D - intereses_acumulados_BPB7D
residual_BPC7D = valor_par_BPC7D - intereses_acumulados_BPC7D
residual_BPD7D = valor_par_BPD7D - intereses_acumulados_BPD7D

#bonares
residual_AL29  = valor_par_AL29 - intereses_acumulados_AL29
residual_AL30  = valor_par_AL30 - intereses_acumulados_AL30
residual_AL35  = valor_par_AL35 - intereses_acumulados_AL35
residual_AE38  = valor_par_AE38 - intereses_acumulados_AE38
residual_AL41  = valor_par_AL41 - intereses_acumulados_AL41
#globales
residual_GD29  = residual_AL29
residual_GD30  = residual_AL30
residual_GD35  = residual_AL35
residual_GD38  = residual_AE38
residual_GD41  = residual_AL41
residual_GD46  = valor_par_GD46 - intereses_acumulados_GD46

# Graficar cada bono con el punto específico
#bopreal

graficar_curva_rendimiento_y_punto('BPY26', [70., 98.], cotizacion_BPY26, residual_BPY26, fecha_cotizacion, 'BPY26')
graficar_curva_rendimiento_y_punto('BPJ5D', [70., 85.], cotizacion_BPJ5D, residual_BPJ5D, fecha_cotizacion, 'BPJ5D')
graficar_curva_rendimiento_y_punto('BPA7D', [70., 98.], cotizacion_BPA7D, residual_BPA7D, fecha_cotizacion, 'BPA7D')
graficar_curva_rendimiento_y_punto('BPB7D', [70., 98.], cotizacion_BPB7D, residual_BPB7D, fecha_cotizacion, 'BPB7D')
graficar_curva_rendimiento_y_punto('BPC7D', [70., 98.], cotizacion_BPC7D, residual_BPC7D, fecha_cotizacion, 'BPC7D')
graficar_curva_rendimiento_y_punto('BPD7D', [70., 98.], cotizacion_BPD7D, residual_BPD7D, fecha_cotizacion, 'BPD7D')


#bonares
graficar_curva_rendimiento_y_punto('AL29', [40., 98.], cotizacion_AL29, residual_AL29, fecha_cotizacion, 'AL29')
graficar_curva_rendimiento_y_punto('AL30', [38., 95.], cotizacion_AL30, residual_AL30, fecha_cotizacion, 'AL30')
graficar_curva_rendimiento_y_punto('AL35', [40., 98.], cotizacion_AL35, residual_AL35, fecha_cotizacion, 'AL35')
graficar_curva_rendimiento_y_punto('AE38', [40., 98.], cotizacion_AE38, residual_AE38, fecha_cotizacion, 'AE38')
graficar_curva_rendimiento_y_punto('AL41', [40., 98.], cotizacion_AL41, residual_AL41, fecha_cotizacion, 'AL41')
#globales
graficar_punto('GD29', cotizacion_GD29, residual_GD29, fecha_cotizacion, 'GD29')
graficar_punto('GD30', cotizacion_GD30, residual_GD30, fecha_cotizacion, 'GD30')
graficar_punto('GD35', cotizacion_GD35, residual_GD35, fecha_cotizacion, 'GD35')
graficar_punto('GD38', cotizacion_GD38, residual_GD38, fecha_cotizacion, 'GD38')
graficar_punto('GD41', cotizacion_GD41, residual_GD41, fecha_cotizacion, 'GD41')
graficar_curva_rendimiento_y_punto('GD46', [40., 98.], cotizacion_GD46, residual_GD46, fecha_cotizacion, 'GD46')


# Configuración de la gráfica
plt.title(fecha_cotizacion)
plt.xlabel("TIR [%]")
plt.ylabel("Precio [USD]")
plt.legend()
plt.grid()
plt.show()


# Lista de tickers de los bonos y precios actuales
tickers = ['BPJ5D','BPD7D','BPY26','AL29', 'AL30', 'AL35', 'AE38', 'AL41', 'GD29', 'GD30', 'GD35', 'GD38', 'GD41', 'GD46']
precios = [cotizacion_BPJ5D,cotizacion_BPD7D,cotizacion_BPY26, cotizacion_AL29, cotizacion_AL30, cotizacion_AL35, cotizacion_AE38, cotizacion_AL41, 
           cotizacion_GD29, cotizacion_GD30, cotizacion_GD35, cotizacion_GD38, cotizacion_GD41, cotizacion_GD46]
residuales = [residual_BPJ5D,residual_BPD7D,residual_BPY26,residual_AL29, residual_AL30, residual_AL35, residual_AE38, residual_AL41, 
              residual_AL29, residual_AL30, residual_AL35, residual_AE38, residual_AL41, residual_GD46]

# Llamar a la función para graficar
graficar_paridad_vs_duracion_modificada(tickers, precios, residuales, fecha_cotizacion)

graficar_maduracion_vs_tir(tickers, precios, residuales, fecha_cotizacion)
